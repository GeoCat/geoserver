<project name="data_directory" default="data-dirs"
 xmlns:if="ant:if" xmlns:unless="ant:unless"
>
  <!-- macros -->
  <macrodef name="download">
    <attribute name="download" default="download"/>
    <attribute name="file"/>
    <attribute name="url"/>
    <sequential>
      <condition property="@{file}.downloaded">
        <available file="@{download}/@{file}"/>
      </condition>
      <get unless:set="@{file}.downloaded"
        skipexisting="true" tryGzipEncoding="true" 
         src="@{url}"
         dest="@{download}/@{file}"/>
    </sequential>
  </macrodef>
  
  <macrodef name="install">
    <attribute name="file"/>
    <attribute name="data" default="target"/>
    <attribute name="location"/>
    <attribute name="download" default="download"/>
    <attribute name="zip"/>
    <sequential>
      <condition property="@{file}.installed">
        <available file="@{data}/@{location}/@{file}"/>
      </condition>         
      <mkdir unless:set="@{file}.installed"
         dir="${data}"/>
      <unzip unless:set="@{file}.installed"
        overwrite="false" src="@{download}/@{zip}" dest="@{data}/@{location}"/>
    </sequential>
  </macrodef>
  
  <!-- some good settings -->
  <!-- dem: https://kokoalberti.com/articles/geotiff-compression-optimization-guide/ -->
  <property name="dem_translate_options"
            value="-co TILED=YES -co COMPRESS=DEFLATE -co PREDICTOR=2 -co NUM_THREADS=ALL_CPUS"/>

  <property name="dem_gdaladdo_options"
            value="--config COMPRESS_OVERVIEW DEFLATE --config INTERLEAVE_OVERVIEW=pixel --config PREDICTOR_OVERVIEW=2"/>
            
  <!-- imagry: http://blog.cleverelephant.ca/2015/02/geotiff-compression-for-dummies.html -->
  <property name="imagry_translate_options"
            value="-co TILED=YES -co COMPRESS=JPEG -co PHOTOMETRIC=YCBCR"/>
  <property name="imagry_gdaladdo_options"
            value="--config COMPRESS_OVERVIEW JPEG --config PHOTOMETRIC_OVERVIEW YCBCR --config INTERLEAVE_OVERVIEW PIXEL"/>
  
  
  <!-- some common locations -->
  <property name="download" location="download"/>
  <property name="process" location="process"/>
  <property name="target" location="target"/>
  <property name="default" location="src/default"/>
  <property name="standard" location="src/standard"/>
  <property name="demo" location="src/demo"/>
  
  <!-- check environment -->
  <condition property="download.available">
    <available file="${download}"/>
  </condition>
  <condition property="process.available">
    <available file="${process}"/>
  </condition>
  
  <property environment="env"/>
  <path id="combined-PATH">
    <pathelement path="${env.PATH}"/> <!--linux-->
    <pathelement path="${env.Path}"/> <!--windows-->
  </path>
  <property name="PATH" refid="combined-PATH"/>
  <condition property="ogr.available">
    <or>
      <available file="ogr2ogr.exe" filepath="${PATH}"/>
      <available file="ogr2ogr" filepath="${PATH}"/>
    </or>
  </condition>
  
  <!-- clean -->
  <target name="clean"
          description="clean data directories">
     <delete dir="${target}"/>
     <delete dir="${standard}/data"/>
     <delete dir="${demo}/data"/>
  </target>
  
  <target name="clean_download"
          description="clean downloads ">
     <delete dir="${download}"/>
  </target>
  
  <target name="clean_process"
          description="clean processed files from downloads ">
     <delete dir="${process}"/>
  </target>

  <!-- init -->
  <target name="init_download" unless="download.available">
     <mkdir dir="${download}"/>
  </target>
  
  <target name="init_process" unless="process.available">
     <mkdir dir="${process}"/>
  </target>
  
  <target name="init" depends="init_download">
     <mkdir dir="${target}"/>
     <mkdir dir="${standard}/data"/>
     <mkdir dir="${demo}/data"/>
  </target>
  
  <!-- download -->
  <target name="download" depends="init_download" 
          description="Pre-download and prep files">
    <parallel threadCount="5">
      <antcall target="ne1_download"/>
      <antcall target="gray_download"/>
      <antcall target="etopo1_download"/>
      <antcall target="ne_geopackage_download"/>
      <antcall target="-physical-download"><param name="features" value="geographic_lines"/></antcall> 
    </parallel>
  </target>
  
  <target name="download-demo" depends="download" 
          description="Pre-download and prep demo files">
    <parallel threadCount="5">
      <antcall target="eo_download"/>
      <antcall target="bmng_download"/>
    </parallel>
  </target>
  
  <!-- process -->
  <target name="process" depends="download,init_process" 
          description="Prep files">
    <antcall target="etopo1_process"/>
    <antcall target="gray_process"/>
    <antcall target="ne1_process"/>
    <antcall target="ne_geopackage_process"/>
  </target>

  <target name="process-demo" depends="download-demo,init_process" 
          description="Prep files">
    <antcall target="eo_process"/>
    <antcall target="bmng_process"/>
    <antcall target="bmng_process_cog"/>
  </target>
  
  <!-- stage -->
  <target name="data-dirs" depends="default-data-dir,standard-data-dir"
          description="Download required files and assemble default and standard data directories">
  </target>

  <target name="default-data-dir" depends="init"
          description="Package default data directory">
    <echo level="info">Packaging ${target}/geoserver_data_dir_default.zip</echo>
    <zip destfile="${target}/geoserver_data_dir_default.zip"
         level="0"
         basedir="${default}"
         includes="**"
         excludes="**/.gitignore, .DS_Store"/>
  </target>

  <target if="ogr.available"
          name="standard-data-dir" depends="init"
          description="Package data directory with Natural Earth geopackage and rasters.">
    <property name="data" value="${standard}/data"/>

    <antcall target="ne1_install"/>
    <antcall target="etopo1_install"/>
    <antcall target="gray_install"/>
    <antcall target="ne_geopackage_install"/>
    <antcall target="-physical"><param name="features" value="geographic_lines"/></antcall> 

    <echo level="info">Packaging ${target}/geoserver_data_dir_standard.zip</echo>
    <zip destfile="${target}/geoserver_data_dir_standard.zip"
         level="0"
         basedir="${standard}"
         includes="**"
         excludes="**/.gitignore, .DS_Store"/>
  </target>
  
  <target if="ogr.available"
          name="demo-data-dir" depends="init"
          description="Package demo directory with Natural Earth geopackage and rasters, bluemarble, and more ...">
    <property name="data" value="${demo}/data"/>

    <antcall target="ne1_install"/>
    <antcall target="etopo1_install"/>
    <antcall target="etopo5_install"/>
    <antcall target="gray_install"/>
    <antcall target="eo_install"/>
    <antcall target="ne_geopackage_install"/>
    <antcall target="bmng_install"/>
    <antcall target="-physical"><param name="features" value="geographic_lines"/></antcall> 
  
    <echo level="info">Packaging ${target}/geoserver_data_dir_demo.zip</echo>
    <zip destfile="${target}/geoserver_data_dir_demo.zip"
         level="0"
         basedir="${demo}"
         includes="**"
         excludes="**/.gitignore, .DS_Store"/>
  </target>
  
  <!-- Natural Earth NE1 -->
  <target name="ne1_download" depends="init_download">
      <get skipexisting="true" tryGzipEncoding="true"
         src="https://naciscdn.org/naturalearth/10m/raster/NE1_HR_LC_SR_W_DR.zip"
         dest="${download}/NE1_HR_LC_SR_W_DR.zip"/>
  </target>
  <target name="ne1_process" depends="ne1_download">
      <condition property="ne1.processed">
        <available file="${process}/ne1.tif"/>
      </condition>
      <unzip unless:set="ne1.processed"
        overwrite="false" src="${download}/NE1_HR_LC_SR_W_DR.zip" dest="${process}/ne1">
      </unzip>
      <exec unless:set="ne1.processed"
        executable="gdal_translate">
        <arg path="${process}/ne1/NE1_HR_LC_SR_W_DR.tif"/>
        <arg path="${process}/ne1.tif"/>
        <arg line="${imagry_translate_options}"/> <!-- grayscale -->
      </exec>
  </target>
  <target name="ne1_install" depends="ne1_process">
      <fail unless:set="data">data property required for install location</fail>
      
      <available file="${data}/ne/raster/ne1.tif" property="tiff.installed"/>
      <copy
        overwrite="false"
        file="${process}/ne1.tif"
        tofile="${data}/ne/raster/ne1.tif"/>
  </target>
  
  <!-- Natural Earth GRAY -->
  <target name="gray_download" depends="init_download">
      <get skipexisting="true" tryGzipEncoding="true" 
         src="https://naciscdn.org/naturalearth/10m/raster/GRAY_HR_SR_W.zip"
         dest="${download}/GRAY_HR_SR_W.zip"/>
  </target>
  <target name="gray_process" depends="gray_download">
      <condition property="gray.processed">
        <available file="${process}/GRAY_HR_SR_W.tif"/>
      </condition>
      <unzip unless:set="tiff.installed"
        overwrite="false" src="${download}/GRAY_HR_SR_W.zip" dest="${process}/gray">
         <patternset>
            <include name="*/GRAY_HR_SR_W.*"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <exec unless:set="gray.processed"
        executable="gdal_translate">
        <arg path="${process}/gray/GRAY_HR_SR_W.tif"/>
        <arg path="${process}/GRAY_HR_SR_W.tif"/>
        <arg line="${dem_translate_options}"/> <!-- grayscale -->
      </exec>
  </target>
  <target name="gray_install" depends="gray_process">
      <fail unless:set="data">data property required for install location</fail>

      <available file="${data}/ne/raster/GRAY_HR_SR_W.tif" property="tiff.installed"/>
      <copy
        overwrite="false"
        file="${process}/GRAY_HR_SR_W.tif"
        tofile="${data}/ne/raster/GRAY_HR_SR_W.tif"/>
      <!--
      <symlink link="${data}/ne/raster/GRAY_HR_SR_W.tif" resource="${download}/GRAY_HR_SR_W.tif"/>
      -->
  </target>
  
  <!-- EEA ETOPO5 -->
  <!-- https://www.eea.europa.eu/data-and-maps/data/world-digital-elevation-model-etopo5 -->
  <target name="etopo5_download" depends="init_download">
     <download
       url="https://www.eea.europa.eu/data-and-maps/data/world-digital-elevation-model-etopo5/zipped-dem-geotiff-raster-geographic-tag-image-file-format-raster-data/zipped-dem-geotiff-raster-geographic-tag-image-file-format-raster-data/at_download/file"
       file="dem_geotiff.zip">
     </download>
  </target>
  <target name="etopo5_process" depends="etopo5_download">
      <condition property="etopo5.processed">
        <available file="${process}/etopo5.tif"/>
      </condition>
      <unzip unless:set="etopo5.processed"
        overwrite="false" src="${download}/dem_geotiff.zip" dest="${process}"/>
      <exec unless:set="etopo5.processed"
        executable="gdal_translate">
        <arg line="-a_srs EPSG:4326"/>
        <arg path="${process}/DEM_geotiff/alwdgg.tif"/>
        <arg path="${process}/etopo5.tif"/>
        <arg line="${dem_translate_options}"/>
      </exec>
  </target>
  <target name="etopo5_install" depends="etopo5_process">
    <fail unless:set="data">data property required for install location</fail>
    <copy
      overwrite="false"
      file="${process}/etopo5.tif"
      tofile="${data}/eaa/etopo5.tif"/>
  </target>
  
  <!-- NOAA ETOPO1 -->
  <!-- https://www.ngdc.noaa.gov/mgg/global/relief/ETOPO1/data/ice_surface/cell_registered/georeferenced_tiff/ -->
  <target name="etopo1_download" depends="init_download">
     <download
       url="https://www.ngdc.noaa.gov/mgg/global/relief/ETOPO1/data/ice_surface/cell_registered/georeferenced_tiff/ETOPO1_Ice_c_geotiff.zip"
       file="ETOPO1_Ice_c_geotiff.zip">
     </download>
  </target>
  
  <target name="etopo1_process" depends="etopo1_download">
      <condition property="etopo1.processed">
        <available file="${process}/etopo1.tif"/>
      </condition>
      <unzip unless:set="etopo1.processed"
        overwrite="false" src="${download}/ETOPO1_Ice_c_geotiff.zip" dest="${process}/etopo1"/>
      <exec unless:set="etopo1.processed"
        executable="gdal_translate">
        <arg line="-a_srs EPSG:4326"/>
        <arg path="${process}/etopo1/ETOPO1_Ice_c_geotiff.tif"/>
        <arg path="${process}/etopo1.tif"/>
        <arg line="${dem_translate_options}"/>
      </exec>
  </target>
  
  <target name="etopo1_install" depends="etopo1_process">
    <fail unless:set="data">data property required for install location</fail>
    <copy
      overwrite="false"
      file="${process}/etopo1.tif"
      tofile="${data}/noaa/etopo1.tif"/>
  </target>
  
  <!-- https://visibleearth.nasa.gov/images/147190/explorer-base-map -->
  <target name="eo_download" depends="init_download">
      <get skipexisting="true" tryGzipEncoding="true"
         src="https://eoimages.gsfc.nasa.gov/images/imagerecords/147000/147190/eo_base_2020_clean_geo.tif"
         dest="${download}/eo_base_2020_clean_geo.tif"/>
  </target>
  <target name="eo_process" depends="eo_download">
      <!-- automatic -->
      <!--
      <condition property="cog.processed">
        <available file="${download}/eo_base_2020_cog.tif"/>
      </condition>
      <echo unless:set="cog.processed" level="info">Explorer Base Map: COG output format ...</echo>
      <exec unless:set="cog.processed"
        executable="gdal_translate">
        <arg path="${download}/eo_base_2020_clean_geo.tif"/>
        <arg path="${download}/eo_base_2020_cog.tif"/>
        <arg line="-of COG"/>
      </exec>
      -->
      
      <!-- manual -->
      <condition property="tiled.processed">
        <available file="${process}/eo_base_2020_tiled.tif"/>
      </condition>
      <echo unless:set="tiled.processed" level="info">Explorer Base Map: eo_base_2020_tiled.tif ...</echo>
      <exec unless:set="tiled.processed"
        executable="gdal_translate">
        <arg path="${download}/eo_base_2020_clean_geo.tif"/>
        <arg path="${process}/eo_base_2020_tiled.tif"/>
        <arg line="${imagry_translate_options}"/>
      </exec>
      <echo unless:set="tiled.processed" level="info">Explorer Base Map: eo_base_2020_tiled.tif overviews ...</echo>
      <copy unless:true="tiled.installed"
        overwrite="false"
        file="${process}/eo_base_2020_tiled.tif"
        tofile="${process}/eo_base_2020_tiled_overviews.tif"/>
      <exec unless:set="tiled.processed"
        executable="gdaladdo">
        <arg line="-r average"/>
        <arg line="${imagry_gdaladdo_options}"/>
        <arg path="${process}/eo_base_2020_tiled_overviews.tif"/>
      </exec>
      
      <condition property="cog2.processed">
        <available file="${process}/eo_base_2020_cog2.tif"/>
      </condition>
      <echo unless:set="cog2.processed" level="info">Explorer Base Map: eo_base_2020_cog2.tif tiled...</echo>
      <exec unless:set="cog2.processed"
        executable="gdal_translate">
        <arg path="${process}/eo_base_2020_tiled_overviews.tif"/>
        <arg path="${process}/eo_base_2020_cog2.tif"/>
        <arg line="${imagry_translate_options}"/>
        <arg line="-co COPY_SRC_OVERVIEWS=YES"/>
      </exec>
  </target>

  <target name="eo_install" depends="eo_process">
      <fail unless:set="data">data property required for install location</fail>

      <condition property="tif.installed">
        <available file="${data}/nasa/eo/eo_base_2020.tif"/>
      </condition>
      <copy unless:true="tif.installed"
        overwrite="false"
        file="${process}/eo_base_2020_cog2.tif"
        tofile="${data}/nasa/eo/eo_base_2020.tif"/>
  </target>
  
  <!-- BMNG -->
  <target name="bmng_download" depends="init_download">
      <property name="mirror"
         value="https://neo.sci.gsfc.nasa.gov/archive/bluemarble/bmng/world_500m"/>

      <parallel threadCount="8">
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.A1.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.A1.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.B1.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.B1.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.C1.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.C1.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.D1.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.D1.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.A2.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.A2.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.B2.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.B2.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.C2.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.C2.png"/>
          </antcall>
          <antcall target="-download">
            <param name="url" value="${mirror}/world.topo.bathy.200410.3x21600x21600.D2.png"/>
            <param name="file" value="world.topo.bathy.200410.3x21600x21600.D2.png"/>
          </antcall>
      </parallel>
  </target>
  
  <target name="bmng_process" depends="bmng_download"
     description="georeference tiles as geotiff with overviews">
      <condition property="bmng.processed">
        <available file="${download}/bmng"/>
      </condition>
      <mkdir unless:set="bmng.processed" dir="${process}/bmng"/>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="A1"/><param name="bounds" value="-180 90 -90 0"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="B1"/><param name="bounds" value="-90 90 0 0"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="C1"/><param name="bounds" value="0 90 90 0"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="D1"/><param name="bounds" value="90 90 180 0"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="A2"/><param name="bounds" value="-180 0 -90 -90"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="B2"/><param name="bounds" value="-90 0 0 -90"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="C2"/><param name="bounds" value="0 0 90 -90"/>
      </antcall>
      <antcall unless:set="bmng.processed"
         target="-bmng">
        <param name="tile" value="D2"/><param name="bounds" value="90 0 180 -90"/>
      </antcall>
  </target>
  <!--  https://kokoalberti.com/articles/geotiff-compression-optimization-guide/ -->
  <target name="-bmng">
      <condition property="${tile}.processed">
        <available file="${process}/bmng/bmng.${tile}.tif"/>
      </condition>
     <echo unless:set="${tile}.processed"
       level="info">bmng ${tile}: ${bounds}</echo>
      <exec unless:set="${tile}.processed"
        executable="gdal_translate">
        <arg line="-a_srs EPSG:4326"/>
        <arg line="-a_ullr ${bounds}"/>
        <arg path="${download}/world.topo.bathy.200410.3x21600x21600.${tile}.png"/>
        <arg path="${process}/bmng/bmng.${tile}.tif"/>
        <arg line="${imagry_translate_options}"/>
      </exec>
      <exec unless:set="${tile}.processed"
        executable="gdaladdo">
        <arg line="-r average"/>
        <arg line="${imagry_gdaladdo_options}"/>
        <arg path="${process}/bmng/bmng.${tile}.tif"/>
      </exec>
  </target>
  
  <target name="bmng_process_cog" depends="bmng_process"
     description="merge into a single geotiff with overvierws and COG layout">
     <condition property="bmng.processed2">
       <available file="${process}/bmng.tif"/>
     </condition>
     <echo unless:set="bmng.processed2" level="info">bmng merge: bmng.tif</echo>
     <exec unless:set="bmng.processed2"
       executable="gdal_merge.py">
       <arg line="-o"/>
       <arg path="${process}/bmng.tif"/>
       <arg line="-of GTiff"/>
       <arg line="-co TILED=YES"/>
       <arg line="-co COMPRESS=JPEG"/>
       <arg line="-co PHOTOMETRIC=YCBCR"/>
       <arg line="-co BIGTIFF=YES"/>
       <arg line="-co NUM_THREADS=ALL_CPUS"/>
       <arg path="${process}/bmng/bmng.A1.tif"/>
       <arg path="${process}/bmng/bmng.B1.tif"/>
       <arg path="${process}/bmng/bmng.C1.tif"/>
       <arg path="${process}/bmng/bmng.D1.tif"/>
       <arg path="${process}/bmng/bmng.A2.tif"/>
       <arg path="${process}/bmng/bmng.B2.tif"/>
       <arg path="${process}/bmng/bmng.C2.tif"/>
       <arg path="${process}/bmng/bmng.D2.tif"/>
     </exec>
     <echo unless:set="bmng.processed2" level="info">bmng merge: bmng.tif overviews</echo>
     <exec unless:set="bmng.processed2"
       executable="gdaladdo">
       <arg line="-r average"/>
       <arg line="${imagry_gdaladdo_options}"/>
       <arg path="${process}/bmng.tif"/>
     </exec>
     <condition property="bmng_cog.processed2">
       <available file="${process}/bmng_cog.tif"/>
     </condition>
     <echo unless:set="bmng_cog.processed2" level="info">bmng merge: bmng.tif cog layout</echo>
     <exec unless:set="bmng_cog.processed2"
       executable="gdal_translate">
       <arg path="${process}/bmng.tif"/>
       <arg path="${process}/bmng_cog.tif"/>
       <arg line="${imagry_translate_options}"/>
       <!--arg line="-co BIGTIFF=YES"/-->
       <arg line="-co COPY_SRC_OVERVIEWS=YES"/>
     </exec>
  </target>
  <target name="bmng_process_pryamid" depends="bmng_process_cog"
    description="process into an pyramid">
     <condition property="bmng.process3">
       <available file="${process}/pryamid" type="dir"/>
     </condition>
     <mkdir unless:set="bmng.process3" dir="${process}/pryamid"/>
     <echo unless:set="bmng.process3" level="info">bmng pyramid: bmng</echo>
      <mkdir unless:set="bmng.pryamid"
        dir="${process}/pryamid"/>
      <exec unless:set="bmng.process3"
        executable="gdal_retile.py">
        <arg line="-v"/>
        <arg line="-r bilinear"/>
        <arg line="-pyramidOnly"/>
        <arg line="-levels 5"/>
        <arg line="-ps 2048 2048"/>
        <arg line="-co TILED=YES"/>
        <arg line="-co COMPRESS=JPEG"/>
        <arg line="-co PHOTOMETRIC=YCBCR"/>
        <arg line="-targetDir"/>
        <arg path="${process}/pryamid"/>
        <arg path="${process}/bmng.tif"/>
      </exec>
      <mkdir unless:set="bmng.pryamid"
        dir="${process}/pryamid/0"/>
      <copy unless:set="bmng.pryamid"
        overwrite="false"
        todir="${process}/pryamid/0">
         <fileset dir="${process}/bmng" includes="bmng.*.tif"/>
      </copy>
  </target>
  
  <target name="bmng_install" depends="bmng_process_cog">
      <fail unless:set="data">data property required for install location</fail>

      <condition property="mosiac.installed">
        <available file="${data}/nasa/bmng"/>
      </condition>
      <copy unless:set="mosiac.installed"
        overwrite="false"
        todir="${data}/nasa/bmng/">
         <fileset dir="${process}/bmng" includes="bmng.*.tif"/>
      </copy>
      <condition property="tiff.installed">
        <available file="${process}/nasa/bmng.tif"/>
      </condition>
      <copy unless:set="tiff.installed"
        overwrite="false"
        todir="${data}/nasa/"
        file="${process}/bmng_cog.tif">
      </copy>
  </target>
  
  <!-- Natural Earth GeoPackage -->
  <target name="ne_geopackage_download" depends="init_download">
     <download
       url="https://naciscdn.org/naturalearth/packages/natural_earth_vector.gpkg.zip"
       file="natural_earth_vector.gpkg.zip">
     </download>
  </target>

  <!-- check if custom (processed) geopackage is available -->
  <target name="ne_geopackage_check">
      <available file="${process}/natural_earth.gpkg" property="gpkg.processed"/>
  </target>
  
  <target name="ne_geopackage_process" depends="ne_geopackage_download,ne_geopackage_check" unless="gpkg.processed">
      
      <echo level="info">Unzip into ${download}</echo>
      <unzip overwrite="false" src="${download}/natural_earth_vector.gpkg.zip" dest="${download}">
         <patternset>
            <include name="packages/*"/>
         </patternset>
         <mapper type="flatten"/>
      </unzip>
      <echo level="info">Use ogr2ogr create natural_earth.gpkg</echo>
      <property name="input" location="${download}/natural_earth_vector.gpkg"/>
      <property name="output" location="${process}/natural_earth.gpkg"/>
      <property name="options" location="-append -update"/>
      
      <!-- CULTRUAL -->
      <!-- admin0 -->
      <antcall target="-lines">
        <param name="table" value="boundary_lines_disputed"/>
        <param name="from" value="ne_10m_admin_0_boundary_lines_disputed_areas"/>
        <param name="options" value=""/>
        <param name="title" value="Disputed boundary lines"/>
        <param name="description" value="Disputed areas and breakaway regions"/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="boundary_lines_land"/>
        <param name="from" value="ne_10m_admin_0_boundary_lines_land"/>
        <param name="options" value="-update"/>
        <param name="title" value="Boundary lines"/>
        <param name="description" value="Country boundaries on land."/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="boundary_lines_map_units"/>
        <param name="from" value="ne_10m_admin_0_boundary_lines_map_units"/>
        <param name="options" value="-update"/>
        <param name="title" value="Interior boundary lines"/>
        <param name="description" value="Groups of individual territories"/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="boundary_lines_maritime"/>
        <param name="from" value="ne_10m_admin_0_boundary_lines_maritime_indicator"/>
        <param name="options" value="-update"/>
        <param name="title" value="Maritime boundary lines"/>
        <param name="description" value="Country boundaries offshore."/>
      </antcall>
      <antcall target="-point">
        <param name="table" value="label_points"/>
        <param name="from" value="ne_10m_admin_1_label_points"/>
        <param name="options" value="-update"/>
        <param name="title" value="Label points"/>
        <param name="description" value="Country labels"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="countries"/>
        <param name="from" value="ne_10m_admin_0_countries_lakes"/>
        <param name="options" value="-update"/>
        <param name="title" value="Countries"/>
        <param name="description" value="Sovereign states, lakes removed"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="disputed_areas"/>
        <param name="from" value="ne_10m_admin_0_disputed_areas"/>
        <param name="options" value="-update"/>
        <param name="title" value="Disputed areas"/>
        <param name="description" value="Disputed areas and breakaway regions"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="map_subunits"/>
        <param name="from" value="ne_10m_admin_0_map_subunits"/>
        <param name="options" value="-update"/>
        <param name="title" value="Subunits"/>
        <param name="description" value="Countries subdivided by non-contiguous units"/>
      </antcall>
      
      <!-- admin1 -->
      <antcall target="-polygons">
        <param name="table" value="states_provinces"/>
        <param name="from" value="ne_10m_admin_1_states_provinces_lakes"/>
        <param name="options" value="-update"/>
        <param name="title" value="State and province boundaries"/>
        <param name="description" value="Internal administrative boundaries"/>
      </antcall>
      <antcall target="-point">
        <param name="table" value="states_provinces_labels"/>
        <param name="from" value="ne_10m_admin_1_label_points"/>
        <param name="options" value="-update"/>
        <param name="title" value="States and provinces labels"/>
        <param name="description" value="Internal administrative boundaries"/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="states_provinces_lines"/>
        <param name="from" value="ne_10m_admin_1_states_provinces_lines"/>
        <param name="options" value="-update"/>
        <param name="title" value="States and province boundaries"/>
        <param name="description" value="Internal administrative boundaries"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="states_provinces_scale"/>
        <param name="from" value="ne_10m_admin_1_states_provinces_scale_rank"/>
        <param name="options" value="-update"/>
        <param name="title" value="States and provinces"/>
        <param name="description" value="Internal administrative boundaries, subdivided with scalerank"/>
      </antcall>
      
      <!-- humanity -->
      <antcall target="-point">
        <param name="table" value="populated_places"/>
        <param name="from" value="ne_10m_populated_places"/>
        <param name="options" value="-update"/>
        <param name="title" value="Populated places"/>
        <param name="description" value="City and town points"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="urban_areas"/>
        <param name="from" value="ne_10m_urban_areas"/>
        <param name="options" value="-update"/>
        <param name="title" value="Urban areas"/>
        <param name="description" value="Area of dense human habitation"/>
      </antcall>
      
      <!-- transport -->
      <antcall target="-point">
        <param name="table" value="airports"/>
        <param name="from" value="ne_10m_airports"/>
        <param name="options" value="-update"/>
        <param name="title" value="Airports"/>
        <param name="description" value="Transportation. Derives from Mile High Club, a detailed GIS compilation of world wide airports that is in the public domain."/>
      </antcall>
      <antcall target="-point">
        <param name="table" value="ports"/>
        <param name="from" value="ne_10m_ports"/>
        <param name="options" value="-update"/>
        <param name="title" value="Ports"/>
        <param name="description" value="Transportation. Derives from High Seas, a detailed GIS compilation of world wide ports that is in the public domain."/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="roads"/>
        <param name="from" value="ne_10m_roads"/>
        <param name="options" value="-update"/>
        <param name="title" value="Roads"/>
        <param name="description" value="Transportation."/>
      </antcall>
      
      <!-- PHYSICAL -->
      <antcall target="-polygons">
        <param name="table" value="ocean"/>
        <param name="from" value="ne_10m_ocean"/>
        <param name="options" value="-update"/>
        <param name="title" value="Ocean"/>
        <param name="description" value="Ocean"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="ocean_scale"/>
        <param name="from" value="ne_10m_ocean_scale_rank"/>
        <param name="options" value="-update"/>
        <param name="title" value="Oceans"/>
        <param name="description" value="Ocean polygon split into contiguous pieces"/>
      </antcall>
      <antcall target="-polygons">
        <param name="table" value="lakes"/>
        <param name="from" value="ne_10m_lakes"/>
        <param name="options" value="-update"/>
        <param name="title" value="Lakes and reservoirs"/>
        <param name="description" value="Natural and artificial lakes."/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="coastline"/>
        <param name="from" value="ne_10m_coastline"/>
        <param name="options" value="-update"/>
        <param name="title" value="Coastline"/>
        <param name="description" value="Ocean coastline, including major islands."/>
      </antcall>
      <antcall target="-lines">
        <param name="table" value="rivers_lake_centerlines"/>
        <param name="from" value="ne_10m_rivers_lake_centerlines_scale_rank"/>
        <param name="options" value="-update"/>
        <param name="title" value="Rivers and lakes"/>
        <param name="description" value="River and lake centerlines, subdivided with scalerank"/>
      </antcall>
      
      <antcall target="-lines">
        <param name="table" value="geographic_lines"/>
        <param name="from" value="ne_10m_geographic_lines"/>
        <param name="options" value="-update"/>
        <param name="title" value="Geographic lines"/>
        <param name="description" value=""/>
      </antcall>

  </target>
  
  <target name="ne_geopackage_install" depends="ne_geopackage_process">
      <fail unless:set="data">data property required for install location</fail>
      
      <condition property="geopackage.installed">
        <available file="${data}/ne/natural_earth.gpkg"/>
      </condition>
      <echo unless:set="geopackage" level="info">Download and repackage natural_earth_vector.gpkg.zip into ${data}/ne</echo>
      <copy unless:set="geopackage"
        file="${process}/natural_earth.gpkg" todir="${data}/ne"/>
  </target>
  
  <!-- download internal targets -->
  <!-- targets are more useful than marcos in order to use parallel execution -->
  <target name="-download">
      <available file="${download}/${file}"
         property="file.downloaded"/>
      
      <echo unless:set="file.downloaded" level="info">Downloading ${file}</echo>
      <get unless:set="file.downloaded"
           skipexisting="true" tryGzipEncoding="true" 
         src="${url}"
         dest="${download}/${file}"/>
  </target>
 
  <!-- install internal targets -->
  <target name="-install">
      <available file="${download}/${zip}"
         property="zip.downloaded"/>
      <available file="${data}/${location}/${file}"
         property="file.installed"/>
         
      <mkdir if:set="data" unless:set="file.installed,zip.downloaded"
         dir="${data}"/>
      <unzip if:set="data" unless:set="file.installed" unless:true="zip.downloaded"
        overwrite="false" src="${download}/${zip}" dest="${data}/${location}"/>
  </target>

  <target name="-cultural-download">
      <echo level="info">Download ne_10m_${features}.zip</echo>
      <get skipexisting="true" tryGzipEncoding="true"
         src="https://naciscdn.org/naturalearth/10m/cultural/ne_10m_${features}.zip"
         dest="${download}/ne_10m_${features}.zip"/>
  </target>
  
  <target name="-cultural" depends="-cultural-download">
      <fail unless:set="data">data property required for install location</fail>
      <unzip if:set="data"
        overwrite="false"
        src="${download}/ne_10m_${features}.zip"
        dest="${data}/ne/cultural"/> 
  </target>

  <target name="-physical-download">
      <echo level="info">Download ne_10m_${features}.zip</echo>
      <get skipexisting="true" tryGzipEncoding="true"
        src="https://naciscdn.org/naturalearth/10m/physical/ne_10m_${features}.zip"
        dest="${download}/ne_10m_${features}.zip"/>
  </target>  
  <target name="-physical" depends="-physical-download">
      <fail unless:set="data">data property required for install location</fail>
      <unzip if:set="data"
        overwrite="false"
        src="${download}/ne_10m_${features}.zip"
        dest="${data}/ne/physical"/> 
  </target>
  
  <!-- processing -->
  <target name="-lines">
      <echo level="info">${title}: ${description}</echo>
      <exec executable="ogr2ogr">
        <arg line="-f 'GPKG'"/>
        <arg path="${output}"/>
        <arg path="${input}"/>
        <arg line="-lco IDENTIFIER='${title}'"/>
        <arg line="-lco DESCRIPTION='${description}'"/>
        <arg line="${options}"/>
        <arg line="-nlt MULTILINESTRING"/>
        <arg line="-nln ${table}"/>
        <arg value="-sql"/>
        <arg value="SELECT * FROM ${from}"/>
      </exec>
  </target>
  
  <target name="-polygons">
      <echo level="info">${title}: ${description}</echo>
      <exec executable="ogr2ogr">
        <arg line="-f 'GPKG'"/>
        <arg path="${output}"/>
        <arg path="${input}"/>
        <arg line="-lco OVERWRITE=YES"/>
        <arg line="-lco IDENTIFIER='${title}'"/>
        <arg line="-lco DESCRIPTION='${description}'"/>
        <arg line="${options}"/>
        <arg line="-nlt MULTIPOLYGON"/>
        <arg line="-nln ${table}"/>
        <arg value="-sql"/>
        <arg value="SELECT * FROM ${from}"/>
      </exec>
  </target>
  <target name="-point">
      <echo level="info">${title}: ${description}</echo>
      <exec executable="ogr2ogr">
        <arg line="-f 'GPKG'"/>
        <arg path="${output}"/>
        <arg path="${input}"/>
        <arg line="-lco IDENTIFIER='${title}'"/>
        <arg line="-lco DESCRIPTION='${description}'"/>
        <arg line="${options}"/>
        <arg line="-nlt POINT"/>
        <arg line="-nln ${table}"/>
        <arg value="-sql"/>
        <arg value="SELECT * FROM ${from}"/>
      </exec>
  </target>
  
  <!--                                                                                 -->
  <!--                                    UNUSED                                       -->
  <!--                                                                                 -->

  <!-- Unused: GeoServer styling workshop shapefile; transitioned to geopackage -->
  <target name="-install_quickstart_shapefiles" depends="init">
    <property name="data" value="${standard}"/>
  
    <echo level="info">https://www.naturalearthdata.com/downloads/</echo>
    <echo level="info">Download and install Natural_Earth_quick_start.zip and extract 10m data into ${data}/ne</echo>
    <get skipexisting="true"
      src="https://naciscdn.org/naturalearth/packages/Natural_Earth_quick_start.zip"
      dest="${download}/Natural_Earth_quick_start.zip"/>
    <mkdir if:set="data"
       dir="${data}"/>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne">
       <patternset>
         <include name="packages/Natural_Earth_quick_start/CHANGELOG"/>
         <include name="packages/Natural_Earth_quick_start/README.md"/>
         <include name="packages/Natural_Earth_quick_start/VERSION"/>
       </patternset>
       <mapper type="flatten"/>
    </unzip>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne/cultural">
       <patternset>
          <include name="packages/Natural_Earth_quick_start/10m_cultural/ne_10m_**"/>
       </patternset>
       <globmapper from="packages/Natural_Earth_quick_start/10m_cultural/ne_10m_*" to="*"
          handledirsep="true"/>
    </unzip>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne/physical">
       <patternset>
          <include name="packages/Natural_Earth_quick_start/10m_physical/ne_10m_**"/>
       </patternset>
       <globmapper from="packages/Natural_Earth_quick_start/10m_physical/ne_10m_*" to="*"
          handledirsep="true"/>
    </unzip>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne/raster">
       <patternset>
          <include name="packages/Natural_Earth_quick_start/50m_raster/NE1_50M_SR_W/**"/>
       </patternset>
       <globmapper from="packages/Natural_Earth_quick_start/50m_raster/NE1_50M_SR_W/*" to="*"
          handledirsep="true"/>
    </unzip>
  </target>
  
  <!-- Unused: GeoServer styling workshop shapefile; transitioned to geopackage -->
  <target name="-install_custom_shapefiles" depends="init">
    <mkdir if:set="data"
       dir="${data}"/>
    <antcall target="-cultural"><param name="features" value="roads"/></antcall>
    <antcall target="-cultural"><param name="features" value="airports"/></antcall>
    <antcall target="-cultural"><param name="features" value="ports"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_boundary_breakaway_disputed_areas"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_boundary_lines_land"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_boundary_lines_maritime_indicator"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_map_units"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_scale_ranks_with_minor_islands"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_0_disputed_areas"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_1_states_provinces_lines"/></antcall>
    <antcall target="-cultural"><param name="features" value="admin_1_states_provinces"/></antcall>
    <antcall target="-cultural"><param name="features" value="populated_places"/></antcall>
    <antcall target="-cultural"><param name="features" value="urban_areas"/></antcall>
    <antcall target="-physical"><param name="features" value="coastline"/></antcall>
    <antcall target="-physical"><param name="features" value="geography_marine_polys"/></antcall>
    <antcall target="-physical"><param name="features" value="geography_regions_elevation_points"/></antcall>
    <antcall target="-physical"><param name="features" value="lakes"/></antcall>
    <antcall target="-physical"><param name="features" value="ocean"/></antcall>
    <antcall target="-physical"><param name="features" value="rivers_lake_centerlines_scale_rank"/></antcall>    
    <antcall target="-physical"><param name="features" value="graticules_all"/></antcall> 
    <antcall target="-physical"><param name="features" value="geographic_lines"/></antcall>     
  </target>
    
  <!-- Unused: transitioned to geopackage -->
  <target name="-install_quickstart_shapefiles_all" depends="init">
    
    <echo level="info">https://www.naturalearthdata.com/downloads/</echo>
    <echo level="info">Download and install Natural_Earth_quick_start.zip into ${data}/ne</echo>
    <get skipexisting="true" tryGzipEncoding="true"
       src="https://naciscdn.org/naturalearth/packages/Natural_Earth_quick_start.zip"
       dest="${download}/Natural_Earth_quick_start.zip"/>
    <mkdir if:set="data"
       dir="${data}"/>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne">
       <patternset>
          <include name="CHANGELOG"/>
          <include name="README.md"/>
          <include name="VERSION"/>
       </patternset>
       <mapper type="flatten"/>
    </unzip>
    <unzip if:set="data"
      overwrite="false" src="${download}/Natural_Earth_quick_start.zip" dest="${data}/ne">
       <patternset>
          <include name="packages/Natural_Earth_quick_start/**"/>
       </patternset>
       <globmapper from="packages/Natural_Earth_quick_start/*" to="*"
          handledirsep="true"/>
    </unzip>
  </target>
  
  <!-- Unused: Complete geopackage -->
  <target name="-install_quickstart_geopackage" depends="init">
    <property name="data" value="${standard}"/>
    <echo level="info">https://www.naturalearthdata.com/downloads/</echo>
    <echo level="info">Download and install natural_earth_vector.gpkg.zip into ${data}/ne</echo>
    <get skipexisting="true" tryGzipEncoding="true"
       src="https://naciscdn.org/naturalearth/packages/natural_earth_vector.gpkg.zip"
       dest="${download}/natural_earth_vector.gpkg.zip"/>
    <mkdir if:set="data"
       dir="${data}"/>
    <unzip if:set="data"
      overwrite="false" src="${download}/natural_earth_vector.gpkg.zip" dest="${data}/ne">
       <patternset>
          <include name="CHANGELOG"/>
          <include name="README.md"/>
          <include name="VERSION"/>
       </patternset>
       <mapper type="flatten"/>
    </unzip>
    <unzip if:set="data"
      overwrite="false" src="${download}/natural_earth_vector.gpkg.zip" dest="${data}/ne">
       <patternset>
          <include name="packages/*"/>
       </patternset>
       <mapper type="flatten"/>
    </unzip>
  </target>
  
</project>